<adonisControls:AdonisWindow
	x:Class="DivinityModManager.Views.MainWindow"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:adonisControls="clr-namespace:AdonisUI.Controls;assembly=AdonisUI"
	xmlns:adonisExtensions="clr-namespace:AdonisUI.Extensions;assembly=AdonisUI"
	xmlns:adonisUI="clr-namespace:AdonisUI;assembly=AdonisUI"
	xmlns:ag="clr-namespace:WpfAutoGrid;assembly=WpfAutoGrid"
	xmlns:controls="clr-namespace:DivinityModManager.Controls"
	xmlns:conv="clr-namespace:DivinityModManager.Converters"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:dapp="clr-namespace:DivinityModManager;assembly=DivinityModManagerCore"
	xmlns:data="clr-namespace:DivinityModManager.Models;assembly=DivinityModManagerCore"
	xmlns:dd="urn:gong-wpf-dragdrop"
	xmlns:dutil="clr-namespace:DivinityModManager.Util;assembly=DivinityModManagerCore"
	xmlns:ext="clr-namespace:DivinityModManager.Controls.Extensions"
	xmlns:local="clr-namespace:DivinityModManager.Views"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:reactiveui="http://reactiveui.net"
	xmlns:vm="clr-namespace:DivinityModManager.ViewModels"
	xmlns:xc="http://schemas.xceed.com/wpf/xaml/toolkit"
    xmlns:loc="clr-namespace:DivinityModManager.Properties"
	x:Name="Main"
	Title="{Binding Title}"
	Width="1600"
	Height="800"
	d:DataContext="{d:DesignInstance Type=vm:MainWindowViewModel}"
	FocusManager.FocusedElement="{Binding ElementName=MainContentPresenter}"
	TitleBarBackground="#4e38c9"
	TitleBarForeground="{DynamicResource {x:Static adonisUI:Brushes.AccentForegroundBrush}}"
	mc:Ignorable="d">
	<Window.Style>
		<Style BasedOn="{StaticResource {x:Type Window}}" TargetType="Window" />
	</Window.Style>
	<!--  d:DataContext="{d:DesignInstance IsDesignTimeCreatable=True, Type=local:MainWindowDebugData}"  -->
	<Window.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="Themes/MainResourceDictionary.xaml" />
			</ResourceDictionary.MergedDictionaries>
			<Style x:Key="UpdateButtonStyle" TargetType="Button">
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="Button">
							<Border Background="{TemplateBinding Background}">
								<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Style.Triggers>
					<Trigger Property="IsMouseOver" Value="True">
						<Setter Property="Background" Value="LightGreen" />
					</Trigger>
				</Style.Triggers>
			</Style>
			<DataTemplate x:Key="UpdatesButtonTemplate">
				<StackPanel x:Name="UpdateViewPanel" VerticalAlignment="Stretch">
					<Button
						x:Name="UpdateViewToggleButton"
						MinWidth="20"
						Margin="0"
						Padding="0"
						HorizontalAlignment="Stretch"
						VerticalAlignment="Stretch"
						BorderThickness="0"
						Command="{Binding ToggleUpdatesViewCommand}"
						Style="{StaticResource UpdateButtonStyle}"
						ToolTip="{x:Static loc:Resources.UpdateViewToggleButtonTooltip}">
						<Button.Content>
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>
								<TextBlock
									Padding="4,0"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									Foreground="{DynamicResource {x:Static adonisUI:Brushes.ForegroundBrush}}"
									Text="{x:Static loc:Resources.Updates}"
									TextAlignment="Center" />
								<controls:BusyIndicator
									Grid.Column="1"
									Width="16"
									Height="16"
									Margin="2"
									Visibility="{Binding IsRefreshingWorkshop, FallbackValue=Collapsed, Converter={StaticResource BoolToVisibilityConverter}}" />
								<TextBlock
									x:Name="UpdateCountTextBlock"
									Grid.Column="1"
									Padding="4,0"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									Foreground="{DynamicResource {x:Static adonisUI:Brushes.ForegroundBrush}}"
									Text="{Binding ModUpdatesViewData.TotalUpdates, FallbackValue='0'}"
									TextAlignment="Center"
									Visibility="{Binding IsRefreshingWorkshop, FallbackValue=Visible, Converter={StaticResource BoolToVisibilityConverterReversed}}">
									<TextBlock.Effect>
										<DropShadowEffect
											BlurRadius="4"
											Direction="330"
											Opacity="0.5"
											ShadowDepth="1"
											Color="Black" />
									</TextBlock.Effect>
								</TextBlock>
								<Image
									x:Name="ExpandImage"
									Grid.Column="3"
									Width="16"
									Height="16"
									RenderOptions.BitmapScalingMode="Fant"
									Source="{StaticResource ExpandDownImage}"
									Stretch="Uniform"
									StretchDirection="UpOnly"
									Visibility="{Binding ModUpdatesAvailable, Converter={StaticResource BoolToVisibilityConverter}, FallbackValue=Collapsed}" />
							</Grid>
						</Button.Content>
					</Button>
				</StackPanel>
				<DataTemplate.Triggers>
					<DataTrigger Binding="{Binding ModUpdatesAvailable}" Value="True">
						<!--<Setter TargetName="RedUpdateBackground" Property="Background">
							<Setter.Value>
								<LinearGradientBrush>
									<GradientStop Offset="0.0" Color="IndianRed" />
									<GradientStop Offset="1.0" Color="Red" />
								</LinearGradientBrush>
							</Setter.Value>
						</Setter>
						<Setter TargetName="RedUpdateBackground" Property="BorderBrush" Value="#FFEE3D3D" />-->
						<Setter TargetName="UpdateCountTextBlock" Property="Foreground" Value="{DynamicResource {x:Static adonisUI:Brushes.ErrorBrush}}" />
						<Setter TargetName="UpdateCountTextBlock" Property="FontWeight" Value="Bold" />
					</DataTrigger>
					<DataTrigger Binding="{Binding ModUpdatesAvailable}" Value="False">
						<!--<Setter TargetName="RedUpdateBackground" Property="BorderBrush" Value="{DynamicResource {x:Static adonisUI:Brushes.Layer1BorderBrush}}" />
						<Setter TargetName="RedUpdateBackground" Property="Background" Value="{DynamicResource {x:Static adonisUI:Brushes.Layer1BackgroundBrush}}" />-->
						<Setter TargetName="UpdateCountTextBlock" Property="Foreground" Value="{DynamicResource {x:Static adonisUI:Brushes.DisabledForegroundBrush}}" />
						<Setter TargetName="UpdateCountTextBlock" Property="FontWeight" Value="Normal" />
					</DataTrigger>
					<DataTrigger Binding="{Binding ModUpdatesViewVisible}" Value="True">
						<Setter TargetName="UpdateViewPanel" Property="Background" Value="{DynamicResource {x:Static adonisUI:Brushes.Layer1HighlightBorderBrush}}" />
					</DataTrigger>
					<DataTrigger Binding="{Binding ModUpdatesViewVisible}" Value="False">
						<Setter TargetName="UpdateViewPanel" Property="Background" Value="Transparent" />
					</DataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ModUpdatesViewVisible}" Value="False" />
							<Condition Binding="{Binding ModUpdatesAvailable}" Value="True" />
						</MultiDataTrigger.Conditions>
						<MultiDataTrigger.Setters>
							<Setter TargetName="ExpandImage" Property="Source" Value="{StaticResource ExpandDownImage}" />
						</MultiDataTrigger.Setters>
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ModUpdatesViewVisible}" Value="True" />
							<Condition Binding="{Binding ModUpdatesAvailable}" Value="True" />
						</MultiDataTrigger.Conditions>
						<MultiDataTrigger.Setters>
							<Setter TargetName="ExpandImage" Property="Source" Value="{StaticResource ExpandUpImage}" />
						</MultiDataTrigger.Setters>
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ModUpdatesViewVisible}" Value="False" />
							<Condition Binding="{Binding ModUpdatesAvailable}" Value="False" />
						</MultiDataTrigger.Conditions>
						<MultiDataTrigger.Setters>
							<Setter TargetName="ExpandImage" Property="Source" Value="{StaticResource ExpandDownImageDisabled}" />
						</MultiDataTrigger.Setters>
					</MultiDataTrigger>
				</DataTemplate.Triggers>
			</DataTemplate>
			<local:ModUpdatesLayout x:Key="ModUpdaterPanel" Background="{DynamicResource {x:Static adonisUI:Brushes.Layer4BackgroundBrush}}" />
			<Grid x:Key="ModOrderPanel" Loaded="ModOrderPanel_Loaded">
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto" />
					<RowDefinition Height="Auto" />
					<RowDefinition Height="*" />
				</Grid.RowDefinitions>
				<Grid Margin="4">
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition Width="*" />
						<ColumnDefinition Width="Auto" />
					</Grid.ColumnDefinitions>
					<Grid.Resources>
						<Style BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="TextBlock">
							<Setter Property="VerticalAlignment" Value="Center" />
							<Setter Property="Margin" Value="2,0,2,0" />
						</Style>
						<Style BasedOn="{StaticResource VerticalSeparator}" TargetType="Rectangle">
							<Setter Property="Margin" Value="8,0,6,0" />
						</Style>
						<Style BasedOn="{StaticResource IconButtonStyle}" TargetType="{x:Type Button}">
							<Setter Property="Tag" Value="{Binding}" />
						</Style>
						<Style BasedOn="{StaticResource {x:Type ContextMenu}}" TargetType="{x:Type ContextMenu}">
							<Setter Property="DataContext" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=PlacementTarget.Tag}" />
						</Style>
					</Grid.Resources>
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<TextBlock
							Margin="0,0,4,0"
							VerticalAlignment="Center"
							Text="{x:Static loc:Resources.Profile}" />
						<ComboBox
							x:Name="ProfilesComboBox"
							Grid.Column="1"
							MinWidth="125"
							MinHeight="16"
							MaxWidth="250"
							DisplayMemberPath="Name"
							IsEditable="False"
							IsTextSearchEnabled="False"
							ItemsSource="{Binding Profiles}"
							SelectedIndex="{Binding SelectedProfileIndex}"
							Tag="{Binding}">
							<ComboBox.ContextMenu>
								<ContextMenu DataContext="{Binding RelativeSource={RelativeSource Mode=Self}, Path=PlacementTarget.Tag}">
									<MenuItem
										Command="{Binding Path=OpenInFileExplorerCommand, Source={x:Static dapp:DivinityApp.Commands}}"
										CommandParameter="{Binding SelectedProfile.Folder}"
										Header="Open Profile Folder in File Explorer..." />
									<MenuItem
										Command="{Binding CopyPathToClipboardCommand}"
										CommandParameter="{Binding SelectedProfile.Folder}"
										Header="Copy Profile Path to Clipboard" />
								</ContextMenu>
							</ComboBox.ContextMenu>
						</ComboBox>
					</Grid>
					<Grid Grid.Column="1" Margin="4,0">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<TextBlock
							Margin="0,0,4,0"
							VerticalAlignment="Center"
							Text="{x:Static loc:Resources.ModOrder}" />
						<ComboBox
							x:Name="OrdersComboBox"
							Grid.Column="1"
							MinWidth="140"
							MinHeight="16"
							MaxWidth="250"
							DisplayMemberPath="Name"
							IsEditable="{Binding IsRenamingOrder, FallbackValue=False}"
							IsTextSearchEnabled="False"
							ItemsSource="{Binding ModOrderList}"
							KeyDown="ComboBox_KeyDown_LoseFocus"
							Loaded="OrdersComboBox_Loaded"
							LostFocus="OrdersComboBox_LostFocus"
							SelectedIndex="{Binding SelectedModOrderIndex}"
							Tag="{Binding}"
							Text="{Binding SelectedModOrderName, Mode=OneWay}">
							<ComboBox.ItemContainerStyle>
								<Style TargetType="ComboBoxItem">
									<EventSetter Event="ComboBoxItem.PreviewMouseDown" Handler="OrderComboBox_OnUserClick" />
								</Style>
							</ComboBox.ItemContainerStyle>
							<ComboBox.ContextMenu>
								<ContextMenu DataContext="{Binding RelativeSource={RelativeSource Mode=Self}, Path=PlacementTarget.Tag}">
									<MenuItem
										Command="{Binding ToggleOrderRenamingCommand}"
										CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}, Path=PlacementTarget}"
										Header="Rename" />
									<MenuItem
										Command="{Binding Path=OpenInFileExplorerCommand, Source={x:Static dapp:DivinityApp.Commands}}"
										CommandParameter="{Binding SelectedModOrder.FilePath}"
										Header="Open in File Explorer..." />
									<MenuItem
										Command="{Binding CopyPathToClipboardCommand}"
										CommandParameter="{Binding SelectedModOrder.FilePath}"
										Header="Copy Path to Clipboard" />
									<MenuItem
										Command="{Binding DeleteOrderCommand}"
										CommandParameter="{Binding SelectedModOrder}"
										Header="Delete Order" />
								</ContextMenu>
							</ComboBox.ContextMenu>
						</ComboBox>
					</Grid>
					<Grid Grid.Column="2" Margin="1,0,0,0">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>
						<StackPanel Orientation="Horizontal">
							<Button
								x:Name="SaveButton"
								Command="{Binding Keys.Save.Command}"
								ToolTip="{x:Static loc:Resources.SaveButtonTooltip}">
								<Button.Resources>
									<Style BasedOn="{StaticResource {x:Type controls:AutoGrayableImage}}" TargetType="{x:Type controls:AutoGrayableImage}">
										<Style.Triggers>
											<Trigger Property="IsEnabled" Value="True">
												<Setter Property="Source" Value="{StaticResource SaveImage}" />
											</Trigger>
											<Trigger Property="IsEnabled" Value="False">
												<Setter Property="Source" Value="{StaticResource SaveDisabledImage}" />
											</Trigger>
										</Style.Triggers>
									</Style>
								</Button.Resources>
								<controls:AutoGrayableImage />
							</Button>
							<Button
								x:Name="SaveAsButton"
								Command="{Binding Keys.SaveAs.Command}"
								ToolTip="{x:Static loc:Resources.SaveAsButtonTooltip}">
								<controls:AutoGrayableImage Source="{StaticResource SaveAsImage}" />
							</Button>
							<Button
								x:Name="AddNewOrderButton"
								Command="{Binding Keys.NewOrder.Command}"
								ToolTip="{x:Static loc:Resources.AddNewOrderButtonTooltip}">
								<controls:AutoGrayableImage Source="{StaticResource AddItemImage}" />
							</Button>
						</StackPanel>
						<Rectangle
							Grid.Column="1"
							Margin="8,0,6,0"
							Style="{StaticResource VerticalSeparator}" />
						<StackPanel Grid.Column="2" Orientation="Horizontal">
							<StackPanel.Resources />
							<TextBlock Text="{x:Static loc:Resources.Export}" />
							<Button
								x:Name="ExportToModSettingsButton"
								Command="{Binding Keys.ExportOrderToGame.Command}"
								ToolTip="{x:Static loc:Resources.ExportToModSettingsButtonTooltip}">
								<controls:AutoGrayableImage Source="{StaticResource ExportScriptImage}" />
								<Button.ContextMenu>
									<ContextMenu>
										<MenuItem
											Command="{Binding Path=OpenFileCommand, Source={x:Static dapp:DivinityApp.Commands}}"
											CommandParameter="{Binding SelectedProfile.ModSettingsFile}"
											Header="{x:Static loc:Resources.OpenExportedModOrderFileHeader}" />
										<MenuItem
											Command="{Binding Path=OpenInFileExplorerCommand, Source={x:Static dapp:DivinityApp.Commands}}"
											CommandParameter="{Binding SelectedProfile.ModSettingsFile}"
											Header="{x:Static loc:Resources.OpenModSettingsInFileExplorerHeader}" />
										<MenuItem
											Command="{Binding CopyPathToClipboardCommand}"
											CommandParameter="{Binding SelectedProfile.ModSettingsFile}"
											Header="{x:Static loc:Resources.CopyPathToClipboardHeader}" />
										<MenuItem Command="{Binding CopyOrderToClipboardCommand}" Header="{x:Static loc:Resources.CopyOrderToClipboardHeader}" />
										<MenuItem Command="{Binding ExportOrderAsListCommand}" Header="{x:Static loc:Resources.ExportOrderAsListHeader}" />
									</ContextMenu>
								</Button.ContextMenu>
							</Button>
							<Button
								x:Name="ExportOrderToArchiveButton"
								Command="{Binding Keys.ExportOrderToZip.Command}"
								ToolTip="{x:Static loc:Resources.ExportOrderToArchiveTooltip}">
								<controls:AutoGrayableImage Source="{StaticResource ZipFileImage}" />
							</Button>
							<Button
								x:Name="ExportOrderToArchiveAsButton"
								Command="{Binding Keys.ExportOrderToArchiveAs.Command}"
								ToolTip="{x:Static loc:Resources.ExportOrderToArchiveAsTooltip}">
								<controls:AutoGrayableImage Source="{StaticResource ZipFileAsImage}" />
							</Button>
							<!--<Rectangle />
							<TextBlock
								Padding="2,0,2,0"
								Text="DM"
								ToolTip="Enable Dungeon Master Campaign Selection" />
							<CheckBox
								x:Name="ToggleGMCheckbox"
								HorizontalAlignment="Center"
								VerticalAlignment="Center"
								Command="{Binding SaveSettingsSilentlyCommand}"
								IsChecked="{Binding Settings.GameMasterModeEnabled, Mode=TwoWay}"
								ToolTip="Enable Dungeon Master Campaign Selection" />
							<Button
								x:Name="LoadGameMasterModOrderButton"
								Command="{Binding Keys.ImportOrderFromSelectedGMCampaign.Command}"
								ToolTip="Load Mod Order from DM Campaign"
								Visibility="{Binding GameMasterModeVisibility}">
								<controls:AutoGrayableImage Source="{StaticResource LoadCampaignOrderImage}" />
							</Button>-->
							<Rectangle />
							<StackPanel Orientation="Horizontal">
								<TextBlock Text="{x:Static loc:Resources.Campaign}" />
								<ComboBox
									x:Name="AdventureModComboBox"
									Grid.Column="1"
									MinWidth="100"
									MinHeight="16"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									DisplayMemberPath="DisplayName"
									IsTextSearchEnabled="False"
									ItemsSource="{Binding AdventureMods}"
									SelectedIndex="{Binding SelectedAdventureModIndex}"
									Tag="{Binding SelectedAdventureMod, NotifyOnSourceUpdated=True}"
									ToolTip="{StaticResource AdventureModTooltip}"
									Visibility="{Binding AdventureModBoxVisibility, FallbackValue=Visible}">
									<ComboBox.ContextMenu>
										<ContextMenu DataContext="{Binding RelativeSource={RelativeSource Mode=Self}, Path=PlacementTarget.Tag}">
											<MenuItem
												Command="{Binding Path=OpenInFileExplorerCommand, Source={x:Static dapp:DivinityApp.Commands}}"
												CommandParameter="{Binding FilePath}"
												Header="{x:Static loc:Resources.OpenAdventureModInFileExplorerHeader}" />
											<MenuItem
												Command="{Binding Path=CopyToClipboardCommand, Source={x:Static dapp:DivinityApp.Commands}}"
												CommandParameter="{Binding FilePath}"
												Header="{x:Static loc:Resources.CopyModPathToClipboardHeader}" />
										</ContextMenu>
									</ComboBox.ContextMenu>
								</ComboBox>
								<!--<ComboBox
									x:Name="GameMasterCampaignComboBox"
									Grid.Column="1"
									MinWidth="100"
									MinHeight="16"
									Margin="4,0,0,0"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									DisplayMemberPath="Name"
									IsTextSearchEnabled="False"
									ItemsSource="{Binding GameMasterCampaigns}"
									SelectedIndex="{Binding SelectedGameMasterCampaignIndex}"
									SelectionChanged="GameMasterCampaignComboBox_SelectionChanged"
									Tag="{Binding SelectedGameMasterCampaign}"
									ToolTip="{StaticResource GMCampaignTooltip}"
									Visibility="{Binding GameMasterModeVisibility, FallbackValue=Collapsed}">
									<ComboBox.ContextMenu>
										<ContextMenu DataContext="{Binding RelativeSource={RelativeSource Mode=Self}, Path=PlacementTarget.Tag}">
											<MenuItem
												Command="{Binding Path=OpenInFileExplorerCommand, Source={x:Static dapp:DivinityApp.Commands}}"
												CommandParameter="{Binding FilePath}"
												Header="Open Campaign in File Explorer..." />
											<MenuItem
												Command="{Binding Path=CopyToClipboardCommand, Source={x:Static dapp:DivinityApp.Commands}}"
												CommandParameter="{Binding FilePath}"
												Header="Copy Campaign Path to Clipboard" />
										</ContextMenu>
									</ComboBox.ContextMenu>
								</ComboBox>-->
							</StackPanel>
							<Rectangle />
							<TextBlock Text="{x:Static loc:Resources.Refresh}" />
							<Button
								x:Name="RefreshButton"
								Command="{Binding Keys.Refresh.Command}"
								ToolTip="{x:Static loc:Resources.RefreshButtonTooltip}">
								<controls:AutoGrayableImage Source="{StaticResource RefreshImage}" />
							</Button>
							<Rectangle />
							<TextBlock Text="{x:Static loc:Resources.Shortcuts}" />
							<Button
								x:Name="OpenModsFolderButton"
								Command="{Binding Keys.OpenModsFolder.Command}"
								ToolTip="{x:Static loc:Resources.OpenModsFolderButtonTooltip}">
								<controls:AutoGrayableImage Source="{StaticResource OpenFolderImage}" />
								<Button.ContextMenu>
									<ContextMenu>
										<MenuItem
											Command="{Binding CopyPathToClipboardCommand}"
											CommandParameter="{Binding PathwayData.DocumentsModsPath}"
											Header="{x:Static loc:Resources.CopyPathToClipboardHeader}" />
									</ContextMenu>
								</Button.ContextMenu>
							</Button>
							<Button
								x:Name="OpenWorkshopFolderButton"
								Command="{Binding Keys.OpenWorkshopFolder.Command}"
								ToolTip="{x:Static loc:Resources.OpenWorkshopFolderButtonTooltip}">
								<controls:AutoGrayableImage Source="{StaticResource OpenSteamWorkshopFolderImage}" />
								<Button.ContextMenu>
									<ContextMenu>
										<MenuItem
											Command="{Binding CopyPathToClipboardCommand}"
											CommandParameter="{Binding Settings.WorkshopPath}"
											Header="{x:Static loc:Resources.CopyPathToClipboardHeader}" />
									</ContextMenu>
								</Button.ContextMenu>
							</Button>
							<Button
								x:Name="OpenExtenderLogsFolderButton"
								Command="{Binding Keys.OpenLogsFolder.Command}"
								ToolTip="{x:Static loc:Resources.OpenExtenderLogsFolderButtonTooltip}">
								<controls:AutoGrayableImage
									Width="16"
									Height="16"
									Source="{StaticResource LogImage}" />
								<Button.ContextMenu>
									<ContextMenu>
										<MenuItem
											Command="{Binding CopyPathToClipboardCommand}"
											CommandParameter="{Binding Settings.ExtenderLogDirectory}"
											Header="{x:Static loc:Resources.CopyPathToClipboardHeader}" />
									</ContextMenu>
								</Button.ContextMenu>
							</Button>
							<Button
								x:Name="OpenGameButton"
								Command="{Binding Keys.LaunchGame.Command}"
								ToolTip="{x:Static loc:Resources.OpenGameButtonTooltip}">
								<controls:AutoGrayableImage Source="{StaticResource OpenGameImage}" />
								<Button.ContextMenu>
									<ContextMenu>
										<MenuItem
											Command="{Binding Path=OpenInFileExplorerCommand, Source={x:Static dapp:DivinityApp.Commands}}"
											CommandParameter="{Binding Settings.GameExecutablePath}"
											Header="{x:Static loc:Resources.OpenGameFolderInFileExplorerHeader}" />
										<MenuItem
											Command="{Binding CopyPathToClipboardCommand}"
											CommandParameter="{Binding Settings.GameExecutablePath}"
											Header="{x:Static loc:Resources.CopyPathToClipboardHeader}" />
									</ContextMenu>
								</Button.ContextMenu>
							</Button>
							<ComboBox
								x:Name="GameLaunchActionComboBox"
								DisplayMemberPath="Description"
								ItemsSource="{Binding Source={ext:EnumExtension {x:Type dapp:DivinityGameLaunchWindowAction}}}"
								SelectedValue="{Binding ActionOnGameLaunch, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
								SelectedValuePath="Value"
								ToolTip="{x:Static loc:Resources.GameLaunchActionComboBoxTooltip}" />
							<Rectangle />
							<TextBlock Text="{x:Static loc:Resources.Support}" />
							<Button
								x:Name="OpenDonationPageButton"
								Command="{Binding Keys.OpenDonationLink.Command}"
								ToolTip="{x:Static loc:Resources.OpenDonationPageButtonTooltip}">
								<controls:AutoGrayableImage Source="{StaticResource OpenDonationLinkImage}" />
							</Button>
							<Button
								x:Name="OpenRepoPageButton"
								Command="{Binding Keys.OpenRepositoryPage.Command}"
								ToolTip="{x:Static loc:Resources.OpenRepoPageButtonTooltip}">
								<controls:AutoGrayableImage Source="{StaticResource OpenRepoLinkImage}" />
							</Button>
						</StackPanel>
					</Grid>
					<Grid Grid.Column="3" />
				</Grid>
				<Separator
					Grid.Row="1"
					Height="1"
					Background="{DynamicResource {x:Static adonisUI:Brushes.Layer3BorderBrush}}" />
				<local:HorizontalModLayout
					x:Name="ModLayout"
					Grid.Row="2"
					ViewModel="{Binding}" />
			</Grid>
			<Style BasedOn="{StaticResource {x:Type Button}}" TargetType="{x:Type Button}" />
			<Style TargetType="{x:Type xc:MessageBox}">
				<Setter Property="Width" Value="600" />
				<Setter Property="Background" Value="{DynamicResource {x:Static adonisUI:Brushes.Layer0BackgroundBrush}}" />
				<Setter Property="ButtonRegionBackground" Value="{DynamicResource {x:Static adonisUI:Brushes.Layer0BackgroundBrush}}" />
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUI:Brushes.Layer1BorderBrush}}" />
				<Setter Property="CaptionForeground" Value="{DynamicResource {x:Static adonisUI:Brushes.AccentForegroundBrush}}" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUI:Brushes.ForegroundBrush}}" />
				<Setter Property="WindowBackground" Value="#4e38c9" />
				<Setter Property="WindowBorderBrush" Value="{DynamicResource {x:Static adonisUI:Brushes.AccentInteractionBorderBrush}}" />
				<Setter Property="CloseButtonStyle">
					<Setter.Value>
						<Style BasedOn="{StaticResource {x:Type Button}}" TargetType="Button">
							<Setter Property="IsEnabled" Value="False" />
							<Setter Property="Opacity" Value="0" />
						</Style>
					</Setter.Value>
				</Setter>
			</Style>
		</ResourceDictionary>
	</Window.Resources>
	<Window.TaskbarItemInfo>
		<TaskbarItemInfo />
	</Window.TaskbarItemInfo>
	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition Height="*" />
			<RowDefinition Height="Auto" />
		</Grid.RowDefinitions>
		<xc:WindowContainer
			Grid.Row="0"
			HorizontalAlignment="Stretch"
			VerticalAlignment="Stretch"
			Panel.ZIndex="99">
			<xc:MessageBox x:Name="MainWindowMessageBox_OK" Template="{StaticResource MessageBoxSelectableText}" />
		</xc:WindowContainer>
		<xc:BusyIndicator
			x:Name="MainBusyIndicator"
			Style="{StaticResource BusyIndicatorProgressStyle}"
			Visibility="Hidden">
			<xc:BusyIndicator.BusyContent>
				<Grid
					Margin="4"
					HorizontalAlignment="Stretch"
					VerticalAlignment="Stretch">
					<Grid.RowDefinitions>
						<RowDefinition Height="Auto" />
						<RowDefinition Height="*" />
						<RowDefinition Height="Auto" />
					</Grid.RowDefinitions>
					<TextBlock
						HorizontalAlignment="Center"
						FontSize="16"
						FontWeight="Bold"
						Text="{Binding MainProgressTitle, FallbackValue='Archiving...'}" />
					<DockPanel Grid.Row="1" Margin="8">
						<TextBlock
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							DockPanel.Dock="Bottom"
							Text="{Binding MainProgressWorkText, FallbackValue='Archiving pak 4/10...'}"
							TextAlignment="Center" />
						<ProgressBar
							MinHeight="15"
							VerticalAlignment="Center"
							DockPanel.Dock="Top"
							Maximum="1"
							Value="{Binding MainProgressValue, FallbackValue='0'}" />
					</DockPanel>
					<Button
						Grid.Row="2"
						Margin="8,0,8,8"
						Padding="20,4"
						HorizontalAlignment="Center"
						VerticalAlignment="Center"
						Command="{Binding CancelMainProgressCommand}"
						Content="Cancel"
						Visibility="{Binding CanCancelProgress, Converter={StaticResource BoolToVisibilityConverter}}" />
				</Grid>
			</xc:BusyIndicator.BusyContent>
			<Grid>
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto" />
					<RowDefinition Height="Auto" />
					<RowDefinition Height="*" />
				</Grid.RowDefinitions>
				<local:DeleteFilesConfirmationView
					x:Name="DeleteFilesView"
					Grid.RowSpan="3"
					Panel.ZIndex="99" />
				<Rectangle
					x:Name="ModListRectangle"
					Grid.RowSpan="3"
					HorizontalAlignment="Stretch"
					VerticalAlignment="Stretch"
					Panel.ZIndex="98"
					Fill="{DynamicResource {x:Static adonisUI:Brushes.Layer3BackgroundBrush}}" />
				<Grid Background="{DynamicResource {x:Static adonisUI:Brushes.Layer3BackgroundBrush}}">
					<Grid.Resources>
						<!--<Color x:Key="WhiteColor">White</Color>
						<Color x:Key="GoldColor">Gold</Color>-->
						<Style
							x:Key="MenuItemHightlightBlink"
							BasedOn="{StaticResource {x:Type MenuItem}}"
							TargetType="{x:Type MenuItem}">
							<Style.Triggers>
								<DataTrigger Binding="{Binding HighlightExtenderDownload}" Value="True">
									<Setter Property="Foreground" Value="Gold" />
									<DataTrigger.EnterActions>
										<BeginStoryboard Name="BlinkyMenuItemStoryboard">
											<Storyboard
												AutoReverse="True"
												BeginTime="00:00:00"
												FillBehavior="Stop"
												RepeatBehavior="Forever"
												Duration="0:0:0.5">
												<!--<ColorAnimation
													Storyboard.TargetProperty="Foreground.Color"
													From="{StaticResource WhiteColor}"
													To="{StaticResource GoldColor}" />-->
												<DoubleAnimation
													Storyboard.TargetProperty="Opacity"
													From="1.0"
													To="0.5" />
											</Storyboard>
										</BeginStoryboard>
									</DataTrigger.EnterActions>
									<DataTrigger.ExitActions>
										<StopStoryboard BeginStoryboardName="BlinkyMenuItemStoryboard" />
									</DataTrigger.ExitActions>
								</DataTrigger>
								<DataTrigger Binding="{Binding HighlightExtenderDownload}" Value="False">
									<Setter Property="Opacity" Value="1.0" />
									<Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUI:Brushes.ForegroundBrush}}" />
								</DataTrigger>
							</Style.Triggers>
						</Style>
					</Grid.Resources>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="*" />
						<ColumnDefinition Width="1" />
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition Width="*" />
					</Grid.ColumnDefinitions>
					<Menu x:Name="TopMenuBar" Padding="2">
                        <MenuItem x:Name="FileMenuItem" Header="{x:Static loc:Resources.File}" />
                        <MenuItem x:Name="EditMenuItem" Header="{x:Static loc:Resources.Edit}" />
                        <MenuItem x:Name="SettingsMenuItem" Header="{x:Static loc:Resources.Settings}" />
                        <MenuItem x:Name="ViewMenuItem" Header="{x:Static loc:Resources.View}" />
                        <MenuItem x:Name="GoMenuItem" Header="{x:Static loc:Resources.Go}" />
						<MenuItem
							x:Name="ToolsMenuItem"
							Header="{x:Static loc:Resources.Tools}"
							Style="{StaticResource MenuItemHightlightBlink}" />
                        <MenuItem x:Name="HelpMenuItem" Header="{x:Static loc:Resources.Help}" />
					</Menu>
					<StackPanel
						Grid.Column="3"
						Margin="2"
						Orientation="Horizontal" />
					<StackPanel
						Grid.Column="2"
						HorizontalAlignment="Left"
						VerticalAlignment="Center"
						Orientation="Horizontal">
						<ContentControl
							HorizontalAlignment="Left"
							VerticalAlignment="Center"
							Content="{Binding}"
							ContentTemplate="{StaticResource UpdatesButtonTemplate}"
							IsEnabled="{Binding ModUpdatesAvailable, Mode=OneWay, FallbackValue=false}" />
					</StackPanel>
				</Grid>
				<Separator
					Grid.Row="1"
					Height="1"
					Background="LightGray"
					BorderThickness="0" />
				<ContentPresenter
					x:Name="MainContentPresenter"
					Grid.Row="2"
					Content="{Binding}">
					<ContentPresenter.ContentTemplate>
						<DataTemplate>
							<ContentControl x:Name="MainContentControl" Content="{StaticResource ModOrderPanel}" />
							<DataTemplate.Triggers>
								<DataTrigger Binding="{Binding ModUpdatesViewVisible}" Value="True">
									<Setter TargetName="MainContentControl" Property="Content" Value="{StaticResource ModUpdaterPanel}" />
								</DataTrigger>
							</DataTemplate.Triggers>
						</DataTemplate>
					</ContentPresenter.ContentTemplate>
				</ContentPresenter>
			</Grid>
		</xc:BusyIndicator>
		<StatusBar Grid.Row="1" MinHeight="16">
			<StatusBarItem HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
				<StackPanel Orientation="Horizontal">
					<controls:BusyIndicator
						Width="16"
						Height="16"
						Margin="2"
						Visibility="{Binding StatusBarBusyIndicatorVisibility, FallbackValue=Collapsed}" />
					<TextBlock
						x:Name="StatusBarLoadingOperationTextBlock"
						VerticalAlignment="Center"
						Text="{Binding StatusBarRightText}" />
				</StackPanel>
			</StatusBarItem>
			<StatusBarItem HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
				<controls:AlertBar x:Name="AlertBar" Theme="Standard" />
			</StatusBarItem>
		</StatusBar>
	</Grid>
</adonisControls:AdonisWindow>
